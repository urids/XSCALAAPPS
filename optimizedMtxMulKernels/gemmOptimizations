__kernel void myGEMM3(const int M, const int N, const int K,
		const __global float* A,
		const __global float* B,
		__global float* C) {
	// Thread identifiers
	const int row = get_local_id(0); // Local row ID (max: TS)
	const int col = get_local_id(1); // Local col ID (max: TS/WPT == RTS)
	const int globalRow = TS*get_group_id(0) + row; // Row ID of C (0..M)
	const int globalCol = TS*get_group_id(1) + col; // Col ID of C (0..N)

	// Local memory to fit a tile of TS*TS elements of A and B
	__local float Asub[TS][TS];
	__local float Bsub[TS][TS];

	// Initialise the accumulation registers
	float acc[WPT];
	for (int w=0; w<WPT; w++) {
		acc[w] = 0.0f;
	}
	// Loop over all tiles
	const int numTiles = K/TS;
	for (int t=0; t<numTiles; t++) {

		// Load one tile of A and B into local memory
		for (int w=0; w<WPT; w++) {
			const int tiledRow = TS*t + row;
			const int tiledCol = TS*t + col;
			Asub[col + w*RTS][row] = A[(tiledCol + w*RTS)*M + globalRow];
			Bsub[col + w*RTS][row] = B[(globalCol + w*RTS)*K + tiledRow];
		}
		// Synchronise to make sure the tile is loaded
		barrier(CLK_LOCAL_MEM_FENCE);

		// Perform the computation for a single tile
		for (int k=0; k<TS; k++) {
			for (int w=0; w<WPT; w++) {
				acc[w] += Asub[k][row] * Bsub[col + w*RTS][k];
			}
		}

		// Synchronise before loading the next tile
		barrier(CLK_LOCAL_MEM_FENCE);
	}

	// Store the final results in C
	for (int w=0; w<WPT; w++) {
		C[(globalCol + w*RTS)*M + globalRow] = acc[w];
	}
}





// Use 2D register blocking (further increase in work per thread)

    #define TSM 128 // The tile-size in dimension M
    #define TSN 128 // The tile-size in dimension N
    #define TSK 16 // The tile-size in dimension K
    #define WPTM 8 // The work-per-thread in dimension M
    #define WPTN 8 // The work-per-thread in dimension N
    #define RTSM (TSM/WPTM) // The reduced tile-size in dimension M
    #define RTSN (TSN/WPTN) // The reduced tile-size in dimension N
    #define LPTA ((TSK*TSM)/(RTSM*RTSN)) // Loads-per-thread for A
    #define LPTB ((TSK*TSN)/(RTSM*RTSN)) // Loads-per-thread for B

   // const size_t local[2] = { TSM/WPTM, TSN/WPTN }; // Or { RTSM, RTSN };
   // const size_t global[2] = { M/WPTM, N/WPTN };

__kernel void myGEMM6(const int M, const int N, const int K,
		const __global float* A,
		const __global float* B,
		__global float* C) {
	// Thread identifiers
	const int tidm = get_local_id(0); // Local row ID (max: TSM/WPTM)
	const int tidn = get_local_id(1); // Local col ID (max: TSN/WPTN)
	const int offsetM = TSM*get_group_id(0); // Work-group offset
	const int offsetN = TSN*get_group_id(1); // Work-group offset

	// Local memory to fit a tile of A and B
	__local float Asub[TSK][TSM];
	__local float Bsub[TSN][TSK+2];

	// Allocate register space
	float Areg;
	float Breg[WPTN];
	float acc[WPTM][WPTN];

	// Initialise the accumulation registers
	for (int wm=0; wm<WPTM; wm++) {
		for (int wn=0; wn<WPTN; wn++) {
			acc[wm][wn] = 0.0f;
		}
	}
	// Loop over all tiles
	int numTiles = K/TSK;
	for (int t=0; t<numTiles; t++) {

		// Load one tile of A and B into local memory
		for (int la=0; la<LPTA; la++) {
			int tid = tidn*RTSM + tidm;
			int id = la*RTSN*RTSM + tid;
			int row = id % TSM;
			int col = id / TSM;
			int tiledIndex = TSK*t + col;
			Asub[col][row] = A[tiledIndex*M + offsetM + row];
			Bsub[row][col] = B[tiledIndex*N + offsetN + row];
		}
		// Synchronise to make sure the tile is loaded
		barrier(CLK_LOCAL_MEM_FENCE);

		// Loop over the values of a single tile
		for (int k=0; k<TSK; k++) {

			// Cache the values of Bsub in registers
			for (int wn=0; wn<WPTN; wn++) {
				int col = tidn + wn*RTSN;
				Breg[wn] = Bsub[col][k];
			}

			// Perform the computation
			for (int wm=0; wm<WPTM; wm++) {
				int row = tidm + wm*RTSM;
				Areg = Asub[k][row];
				for (int wn=0; wn<WPTN; wn++) {
					acc[wm][wn] += Areg * Breg[wn];
				}
			}
		}

		// Synchronise before loading the next tile
		barrier(CLK_LOCAL_MEM_FENCE);
	}

	// Store the final results in C
	for (int wm=0; wm<WPTM; wm++) {
		int globalRow = offsetM + tidm + wm*RTSM;
		for (int wn=0; wn<WPTN; wn++) {
			int globalCol = offsetN + tidn + wn*RTSN;
			C[globalCol*M + globalRow] = acc[wm][wn];
		}
	}
}
